generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  USER
  ADMIN
  MANAGER
}

enum PaymentMethod {
  CASH
  ONLINEPAYMENT
}

enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERED
}

enum Rating {
  ONE
  TWO
  THREE
  FOUR
  FIVE
}

enum LOCATION {
  TOP
  BOTTOM
}

enum ACTION {
  home
  shop
  customized_order
}

model User {
  id             String       @id @default(uuid())
  email          String       @unique
  hashedPassword String
  name           String
  role           ROLE         @default(USER)
  order          Order[]
  address        Address[]
  Review         Review[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userCoupon     userCoupon[]
}

model Zone {
  id        String    @id @default(uuid())
  name      String
  fees      Decimal
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  Address   Address[]
}

model Address {
  id          String  @id @default(uuid())
  userId      String
  zoneId      String?
  streetName  String
  BuildingNo  String
  Floor       String
  apartmentNo String
  city        String  @default("Cairo")
  Order       Order[]
  zone        Zone?   @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  User        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([id, userId])
}

model Category {
  id          String     @id @default(uuid())
  name        String
  imageUrl    String?
  products    Product[]
  parentId    String?
  subCategory Category?  @relation("ParentToChildCategory", fields: [parentId], references: [id], onDelete: SetNull)
  Category    Category[] @relation("ParentToChildCategory")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Product {
  id          String   @id @default(uuid())
  name        String
  price       Decimal
  salePrice   Decimal? @default(0)
  description String

  productInventory productInventory?
  productAttribute productAttribute?

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  orderItems OrderItems[]
  image      Images[]
  Review     Review[]
  Sales      Sales[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model productInventory {
  id        String  @id @default(uuid())
  productId String  @unique
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  stock     Int     @default(10)
  soldOut   Boolean @default(false)
}

model productAttribute {
  prod_atr_id String  @id @default(uuid())
  productId   String  @unique
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  bestSeller  Boolean @default(false)
  newArrival  Boolean @default(false)
  recommended Boolean @default(false)
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  published Boolean  @default(false)
  content   String
  rating    Rating
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id             String        @id @default(uuid())
  userId         String
  addressId      String?
  phoneNumber    String
  comment        String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  orderStatus    OrderStatus   @default(PENDING)
  OrderItems     OrderItems[]
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Address        Address?      @relation(fields: [addressId], references: [id], onDelete: SetNull)
  OrderSummary   OrderSummary? @relation(fields: [orderSummaryId], references: [id], onDelete: Cascade)
  orderSummaryId String?
}

model OrderSummary {
  id            String        @id @default(uuid())
  order         Order[]
  paymentMethod PaymentMethod @default(CASH)
  Subtotal      Decimal
  DeliveryFee   Int?
  Discount      Decimal       @default(0)
  OrderTotal    Decimal
}

model OrderItems {
  id        String   @id @default(uuid())
  orderId   String
  productId String?
  quantity  Int
  Product   Product? @relation(fields: [productId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Sales {
  productId    String   @id
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  price        Decimal
  quantitySold Int
  Revenue      Decimal
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Coupon {
  id             String       @id @default(uuid())
  couponCode     String       @unique
  discountAmount Int          @default(20)
  minimumAmount  Int          @default(100)
  couponData     couponData?
  userCoupon     userCoupon[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model couponData {
  id         String   @id @default(uuid())
  couponId   String   @unique
  coupon     Coupon   @relation(fields: [couponId], references: [id], onDelete: Cascade)
  expiration DateTime
  limit      Int      @default(100)
  valid      Boolean  @default(true)
  countUsed  Int      @default(0)
}

model userCoupon {
  id        String   @id @default(uuid())
  couponId  String
  coupon    Coupon   @relation(fields: [couponId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  uses      Int      @default(0)
  canRedeem Boolean  @default(true)
  createdAt DateTime @default(now())
}

model CustomizedOrder {
  id        String   @id @default(uuid())
  name      String
  email     String
  phone     String
  message   String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Slider {
  id        String          @id @default(uuid())
  name      String
  published Boolean         @default(false)
  content   SliderContent[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model SliderContent {
  id        String   @id @default(uuid())
  slider    Slider   @relation(fields: [sliderId], references: [id], onDelete: Cascade)
  sliderId  String
  title     String
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     String
}

model Banner {
  id        String   @id @default(uuid())
  title     String
  text      String
  image     String
  location  LOCATION @default(TOP)
  action    ACTION   @default(home)
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Anouncement {
  id        String   @id @default(uuid())
  text      String
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Images {
  id        String   @id @default(uuid())
  url       String
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactInfo {
  id        String   @id @default(uuid())
  phone     String
  email     String
  instagram String
  facebook  String
  tiktok    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
